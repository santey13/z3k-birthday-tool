{"version":3,"sources":["Components/UploadBirthdays/UploadBirthdays.js","Helpers/snakeToCamel.js","Helpers/parseDate.js","Helpers/parseDepartment.js","Components/BirthdaysList/BirthdaysList.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","input","display","UploadBirthdays","setBirthdays","classes","handleFile","event","a","readXlsxFile","target","files","data","keys","map","key","toLowerCase","replaceAll","replace","group","toUpperCase","birthdays","reduce","user","index","userInfo","field","fieldIndex","push","Box","component","m","className","textAlign","accept","id","multiple","type","onChange","htmlFor","Button","variant","color","startIcon","parseDate","dateString","Date","parse","parseDepartment","orgUnit","parentOrgUnit","includes","prefix","BirthdaysList","Grid","container","justifyContent","sort","b","birthdate","getDate","name","avatarUrl","item","xs","src","title","alt","style","width","height","toLocaleString","month","App","useState","hasBirthdays","length","Container","maxWidth","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a83c99e7.chunk.js","sourcesContent":["import { Box, Button } from \"@material-ui/core\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { makeStyles } from '@material-ui/core/styles';\nimport readXlsxFile from 'read-excel-file';\nimport { snakeToCamel } from \"../../Helpers/snakeToCamel\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: 'none',\n  },\n}));\n\nexport const UploadBirthdays = ({setBirthdays}) => {\n  const classes = useStyles();\n\n  const handleFile = async (event) => {\n    const data = await readXlsxFile(event.target.files[0]);\n\n    const keys = data[0].map((key) => snakeToCamel(key.toLowerCase().replaceAll(' ', '_')));\n    const birthdays = data.reduce((birthdays, user, index) => {\n      if (index === 0) {\n        return birthdays\n      }\n      const userInfo = user.reduce((userInfo, field, fieldIndex) => {\n        userInfo[keys[fieldIndex]] = field;\n        return userInfo;\n      }, {})\n\n      birthdays.push(userInfo)\n      return birthdays\n    }, []);\n\n    setBirthdays(birthdays);\n  };\n\n  return (\n    <Box component=\"div\" m={1} className={classes.root} textAlign=\"center\">\n      <input\n        accept=\".xlsx\"\n        className={classes.input}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n        onChange={handleFile}\n      />\n      <label htmlFor=\"contained-button-file\">\n        <Button variant=\"contained\" color=\"primary\" component=\"span\" startIcon={<CloudUploadIcon />}>\n          Upload birthdays xls\n        </Button>\n      </label>\n    </Box>\n  );\n}\n","export const snakeToCamel = str =>\n  str.toLowerCase().replace(/([-_][a-z])/g, group =>\n    group\n      .toUpperCase()\n      .replace('-', '')\n      .replace('_', '')\n  );\n","export const parseDate = (dateString) => new Date(Date.parse(dateString));\n","export const parseDepartment = (orgUnit, parentOrgUnit) => {\n  if ([\n    'Risk Management',\n    'Billing',\n    'Hosting',\n    'SSL',\n    'Datacenter Operations',\n    'Legal & Abuse',\n    'PRODUCT',\n    'CS Quality Assurance',\n    'Private Email',\n    'Domains',\n    'Pre-sales',\n    'CS Operations',\n    'Site Reliability Engineering',\n    'People',\n    'Technical Support',\n    'TECHNOLOGY',\n    'SRE / DevOps',\n    'Concierge',\n    'Training Center',\n    'IT Service Management Team'\n  ].includes(parentOrgUnit)) {\n    return  `NC ${parentOrgUnit}`;\n  }\n\n  if ('Engineering' === parentOrgUnit) {\n    return `NC UA ${parentOrgUnit}`\n  }\n\n  if (['BI R&D', 'BI Reporting'].includes(parentOrgUnit)) {\n    return  'NC Global BI' ;\n  }\n\n  if ('TC Hosting Team' === parentOrgUnit) {\n    return  'NC Training Center' ;\n  }\n\n  if ('Business Services' === parentOrgUnit) {\n    return  'NC BA & P' ;\n  }\n\n  if ('IT Service Management Team' === orgUnit) {\n    return 'NC IT department'\n  }\n\n  if ('Local IT Engineering Infrastructure Team' === orgUnit) {\n    return 'Z3k Local IT'\n  }\n\n\n  if ('Customer Support' === orgUnit) {\n    return 'NC Management'\n  }\n\n  if ('Customer Support' === parentOrgUnit) {\n    return  `NC ${orgUnit}`;\n  }\n\n  if (['ZONE3000.net','Global Z3K Operations'].includes(parentOrgUnit)) {\n    const prefix = [\n      'Marketing',\n      'Operations',\n      'PR',\n\n    ].includes(orgUnit) ? 'Z3K ' : '';\n    return `${prefix}${orgUnit}`;\n  }\n\n  return `${orgUnit}, ${parentOrgUnit}`\n}\n","import { parseDate } from \"../../Helpers/parseDate\";\nimport { parseDepartment } from \"../../Helpers/parseDepartment\";\nimport { Grid } from \"@material-ui/core\"\nimport './BirthdaysList.css';\n\nexport const BirthdaysList = ({birthdays}) => {\n  return (\n      <Grid container={12} spacing={10} justifyContent=\"center\" className=\"BirthdaysList\">\n        {\n          birthdays\n            .sort((a, b) => {\n              return parseDate(a.birthdate).getDate() - parseDate(b.birthdate).getDate()\n            })\n            .map(({name, birthdate, orgUnit, parentOrgUnit, avatarUrl}) =>\n              (\n                <Grid item xs={3} key={name} className=\"BirthdaysListItem\" justifyContent=\"center\">\n                  <img src={avatarUrl.replace('https://core.zone3000.net', '')} title={name} alt={name} style={{ width: '100%', height: 'auto' }}/>\n                  <div>\n                    <strong>\n                      {parseDate(birthdate).toLocaleString('default', { month: 'long' })}, {parseDate(birthdate).getDate()}\n                    </strong>\n                  </div>\n                  <div>{name}</div>\n                  <div>{parseDepartment(orgUnit, parentOrgUnit)}</div>\n                </Grid>\n              )\n         )}\n      </Grid>\n  )\n}\n","import './App.css';\nimport { Box, Container } from '@material-ui/core'\nimport { UploadBirthdays } from \"../UploadBirthdays/UploadBirthdays\";\nimport { useState } from \"react\"\nimport { BirthdaysList } from \"../BirthdaysList/BirthdaysList\"\n\nfunction App() {\n  const [birthdays, setBirthdays] = useState([]);\n  const hasBirthdays = birthdays.length > 0;\n\n  return (\n      <Container className=\"App\" maxWidth=\"lg\">\n        <Box marginTop={5}>\n          {hasBirthdays ? <BirthdaysList birthdays={birthdays} /> : <UploadBirthdays setBirthdays={setBirthdays}/>}\n        </Box>\n      </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}